return {
--     {
--         "williamboman/mason.nvim",
--         build = "MasonUpdate",
--         config = function()
--             require("mason").setup()
--         end
--     },
--     {
--         "williamboman/mason-lspconfig.nvim",
--         config = function()
--             local lspconfig = require('lspconfig')
--             -- Used for lsp autocompletion
--             local capabilities = require("cmp_nvim_lsp").default_capabilities()
--             -- Enable keybinds for available lsp Servers
--             local on_attach = function(client, bufnr)
--             end
--
--             require("mason").setup()
--
--             require("mason-lspconfig").setup({
--                 ensure_installed = {
--                     -- "lua_ls",
--                     -- "cssls",
--                     -- "html",
--                 },
--                 automatic_installation = true,
--             })
--
--             require("mason-lspconfig").setup_handlers {
--                 -- The first entry (without a key) will be the default handler
--                 -- and will be called for each installed server that doesn't have
--                 -- a dedicated handler.
--                 function(server_name) -- default handler (optional)
--                     require("lspconfig")[server_name].setup({
--                         capabilities = capabilities,
--                         on_attach = on_attach,
--                     })
--                 end,
--                 -- Next, you can provide a dedicated handler for specific servers.
--                 -- For example, a handler override for the `rust_analyzer`:
--
--                 -- ["rust_analyzer"] = function ()
--                 -- require("rust-tools").setup {}
--                 -- -- end
--
--                 -- ["tailwindcss"] = function ()
--                 -- lspconfig.tailwindcss.setup{}
--                 -- end
--
--                 ["lua_ls"] = function()
--                     lspconfig.lua_ls.setup {
--                         settings = {
--                             Lua = {
--                                 diagnostics = {
--                                     globals = { "vim" }
--                                 }
--                             }
--                         }
--                     }
--                 end,
--             }
--         end
--     },
--     {
--         "neovim/nvim-lspconfig",
--         config = function()
--             vim.keymap.set("n", "[d", "<cmd>lua vim.diagnostic.goto_prev()<CR>")
--             vim.diagnostic.config({
--                 virtual_text = false
--             })
--             vim.api.nvim_create_autocmd('LspAttach', {
--                 group = vim.api.nvim_create_augroup('UserLspConfig', {}),
--                 callback = function(ev)
--                     -- Enable completion triggered by <c-x><c-o>
--                     -- vim.bo[ev.buf].omnifunc = 'v:lua.vim.lsp.omnifunc'
--
--                     -- Buffer local mappings.
--                     -- See `:help vim.lsp.*` for documentation on any of the below functions
--                     local opts = { buffer = ev.buf }
--                     vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
--                     -- vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
--                     -- vim.keymap.set('n', 'gd', "<cmd>Lspsaga peek_definition<CR>")
--                     -- vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
--                     -- vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
--                     -- vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
--                     -- vim.keymap.set('n', '<space>wa', vim.lsp.buf.add_workspace_folder, opts)
--                     -- vim.keymap.set('n', '<space>wr', vim.lsp.buf.remove_workspace_folder, opts)
--                     -- vim.keymap.set('n', '<space>wl', function()
--                     --     print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--                     -- end, opts)
--                     -- vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, opts)
--                     -- vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, opts)
--                     -- vim.keymap.set({ 'n', 'v' }, '<space>ca', vim.lsp.buf.code_action, opts)
--                     -- vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
--                     vim.keymap.set('n', '<space>f', function()
--                         vim.lsp.buf.format { async = true }
--                     end, opts)
--                 end,
--             })
--         end
--     },
}
